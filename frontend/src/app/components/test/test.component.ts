import { Component, OnInit, ViewChild } from '@angular/core';

import { HttpClient } from '@angular/common/http';
import { ChartDataSets, ChartOptions } from 'chart.js';
import { Color, BaseChartDirective, Label } from 'ng2-charts';

import { Router, ActivatedRoute, ParamMap } from '@angular/router';
import { AngularFireAuth } from '@angular/fire/auth';
import { AngularFirestore, AngularFirestoreDocument } from '@angular/fire/firestore';

import { TestJson, Test } from 'src/app/Models/test';
import { PatientPhototype } from 'src/app/Models/patients';
import { Subscription } from 'rxjs';


@Component({
  selector: 'app-test',
  templateUrl: './test.component.html',
  styleUrls: ['./test.component.scss']
})
export class TestComponent implements OnInit {
  public processing: boolean = true;

  public lineChartData: ChartDataSets[] = [
    { data: [1.0000,1.0000,0.9836,0.9748,0.9669,0.9251,0.8889,0.8712,0.8438,0.8158,0.8087,0.8029,0.7837,0.7727,0.7448,0.7403,0.7355,0.7039,0.6975,0.6854,0.6710,0.6682,0.6635,0.6528,0.6525,0.6375,0.6330,0.6282,0.6229,0.6190,0.6170,0.6139,0.6139,0.6134,0.6112,0.5970,0.5771,0.5702,0.5623,0.5593,0.5564,0.5518,0.5481,0.5422,0.5371,0.5352,0.5295,0.5132,0.5095,0.5036,0.4993,0.4951,0.4946,0.4940,0.4935,0.4930,0.4930,0.4907,0.4884,0.4819,0.4819,0.4803,0.4753,0.4753,0.4740,0.4740,0.4726,0.4726,0.4726,0.4726,0.4715,0.4688,0.4617,0.4506,0.4506,0.4506,0.4499,0.4499,0.4499,0.4460,0.4460,0.4460,0.4460,0.4460,0.4393,0.4323,0.4282,0.4282,0.4282,0.4282,0.4282,0.4282,0.4282,0.4282,0.4252,0.4252,0.4252,0.4252,0.4252,0.4252,0.4252,0.4252,0.4252,0.4083,0.4083,0.4083,0.4083,0.4083,0.4083,0.4083,0.4083,0.3925,0.3925,0.3813,0.3813,0.3813,0.3813,0.3813,0.3813,0.3813,0.3813,0.3813,0.3813,0.3813,0.3813,0.3792,0.3792,0.3792,0.3792,0.3792,0.3792,0.3792,0.3792,0.3792,0.3792,0.3782,0.3782,0.3782,0.3782,0.3782,0.3782,0.3767,0.3767,0.3767,0.3767,0.3767,0.3767,0.3767,0.3767,0.3755,0.3755,0.3755,0.3755,0.3755,0.3755,0.3755,0.3755,0.3755,0.3755,0.3755,0.3755,0.3755,0.3755,0.3755,0.3755,0.3755,0.3755,0.3755,0.3755,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741,0.3741], label: 'Test 001' },
    { data: [1.0000,1.0000,0.9910,0.9909,0.9908,0.9552,0.9260,0.9153,0.8778,0.8531,0.8435,0.8426,0.8270,0.8143,0.8049,0.8044,0.8033,0.7870,0.7859,0.7856,0.7831,0.7825,0.7813,0.7656,0.7638,0.7628,0.7518,0.7491,0.7473,0.7363,0.7311,0.7209,0.7206,0.7159,0.7108,0.7070,0.6916,0.6809,0.6767,0.6764,0.6762,0.6753,0.6729,0.6690,0.6680,0.6675,0.6657,0.6623,0.6607,0.6607,0.6557,0.6539,0.6449,0.6448,0.6443,0.6442,0.6442,0.6439,0.6419,0.6214,0.6214,0.6200,0.6198,0.6198,0.6167,0.6167,0.6126,0.6120,0.6120,0.6116,0.6094,0.6058,0.5974,0.5943,0.5937,0.5937,0.5936,0.5919,0.5918,0.5769,0.5769,0.5767,0.5767,0.5753,0.5747,0.5703,0.5703,0.5703,0.5670,0.5670,0.5670,0.5666,0.5665,0.5665,0.5647,0.5639,0.5639,0.5639,0.5639,0.5639,0.5628,0.5628,0.5628,0.5571,0.5571,0.5571,0.5571,0.5530,0.5529,0.5529,0.5529,0.5497,0.5497,0.5461,0.5461,0.5461,0.5461,0.5461,0.5461,0.5461,0.5460,0.5460,0.5460,0.5459,0.5459,0.5454,0.5454,0.5454,0.5448,0.5448,0.5448,0.5432,0.5432,0.5432,0.5431,0.5375,0.5375,0.5375,0.5375,0.5375,0.5375,0.5374,0.5374,0.5374,0.5374,0.5374,0.5374,0.5374,0.5374,0.5362,0.5361,0.5361,0.5361,0.5361,0.5361,0.5361,0.5361,0.5361,0.5361,0.5361,0.5361,0.5361,0.5361,0.5361,0.5361,0.5361,0.5361,0.5361,0.5361,0.5339,0.5338,0.5338,0.5338,0.5338,0.5338,0.5338,0.5338,0.5338,0.5338,0.5335,0.5335,0.5335,0.5335,0.5335,0.5335,0.5335,0.5335,0.5316,0.5316,0.5316,0.5316,0.5316,0.5316,0.5316,0.5316,0.5316,0.5316,0.5316,0.5316,0.5316,0.5316,0.5316,0.5316,0.5316,0.5316,0.5316,0.5316,0.5316,0.5316,0.5316,0.5316,0.5316,0.5316,0.5316,0.5316,0.5316,0.5316,0.5316,0.5316,0.5316,0.5316,0.5316,0.5316,0.5316,0.5316,0.5316,0.5316,0.5316,0.5316,0.5316,0.5312,0.5312,0.5312,0.5312,0.5312,0.5312,0.5312,0.5312,0.5312,0.5312,0.5312,0.5312,0.5312,0.5312,0.5312,0.5312,0.5312,0.5312,0.5312,0.5312,0.5312,0.5312,0.5312,0.5312], label: 'Low'},
    { data: [1.0000,1.0000,0.9903,0.9902,0.9899,0.9525,0.9217,0.9099,0.8691,0.8432,0.8331,0.8311,0.8150,0.8001,0.7895,0.7889,0.7874,0.7698,0.7681,0.7675,0.7629,0.7613,0.7597,0.7423,0.7402,0.7385,0.7262,0.7227,0.7196,0.7088,0.7043,0.6927,0.6917,0.6835,0.6774,0.6727,0.6566,0.6448,0.6401,0.6386,0.6380,0.6365,0.6345,0.6304,0.6293,0.6274,0.6258,0.6227,0.6210,0.6207,0.6166,0.6146,0.6068,0.6062,0.6050,0.6050,0.6050,0.6044,0.5999,0.5808,0.5808,0.5796,0.5792,0.5791,0.5751,0.5751,0.5711,0.5703,0.5703,0.5689,0.5650,0.5619,0.5530,0.5504,0.5496,0.5496,0.5492,0.5459,0.5453,0.5304,0.5304,0.5302,0.5300,0.5264,0.5255,0.5218,0.5216,0.5215,0.5193,0.5191,0.5191,0.5189,0.5188,0.5188,0.5169,0.5164,0.5164,0.5164,0.5164,0.5163,0.5142,0.5142,0.5142,0.5103,0.5103,0.5103,0.5103,0.5067,0.5067,0.5067,0.5067,0.5038,0.5038,0.5003,0.5003,0.5003,0.5003,0.5001,0.5001,0.5001,0.4997,0.4997,0.4997,0.4996,0.4996,0.4988,0.4988,0.4988,0.4985,0.4985,0.4985,0.4970,0.4970,0.4970,0.4970,0.4938,0.4938,0.4938,0.4938,0.4938,0.4938,0.4937,0.4937,0.4937,0.4937,0.4937,0.4937,0.4937,0.4937,0.4908,0.4906,0.4906,0.4906,0.4906,0.4906,0.4906,0.4906,0.4906,0.4906,0.4906,0.4906,0.4906,0.4906,0.4906,0.4906,0.4906,0.4906,0.4906,0.4906,0.4881,0.4880,0.4880,0.4880,0.4880,0.4880,0.4880,0.4880,0.4880,0.4880,0.4878,0.4878,0.4878,0.4878,0.4878,0.4878,0.4878,0.4878,0.4868,0.4868,0.4868,0.4868,0.4868,0.4868,0.4868,0.4868,0.4868,0.4868,0.4868,0.4868,0.4868,0.4868,0.4868,0.4868,0.4868,0.4868,0.4868,0.4868,0.4868,0.4868,0.4868,0.4868,0.4868,0.4868,0.4868,0.4868,0.4868,0.4868,0.4868,0.4868,0.4868,0.4868,0.4868,0.4868,0.4868,0.4868,0.4868,0.4868,0.4868,0.4868,0.4868,0.4860,0.4860,0.4860,0.4860,0.4860,0.4860,0.4860,0.4860,0.4860,0.4860,0.4860,0.4860,0.4860,0.4860,0.4860,0.4860,0.4860,0.4860,0.4860,0.4860,0.4860,0.4860,0.4860,0.4860], label: 'Medium'},
    { data: [1.0000,1.0000,0.9899,0.9897,0.9892,0.9480,0.9103,0.8963,0.8514,0.8194,0.8070,0.8042,0.7857,0.7670,0.7554,0.7533,0.7483,0.7238,0.7205,0.7188,0.7117,0.7068,0.7054,0.6851,0.6824,0.6779,0.6648,0.6575,0.6528,0.6421,0.6382,0.6238,0.6214,0.6090,0.6014,0.5933,0.5774,0.5606,0.5556,0.5530,0.5515,0.5488,0.5466,0.5412,0.5390,0.5362,0.5347,0.5324,0.5311,0.5296,0.5270,0.5232,0.5183,0.5171,0.5145,0.5145,0.5145,0.5128,0.5098,0.4932,0.4928,0.4914,0.4899,0.4893,0.4856,0.4856,0.4815,0.4806,0.4804,0.4782,0.4748,0.4723,0.4626,0.4602,0.4584,0.4584,0.4575,0.4518,0.4510,0.4360,0.4360,0.4360,0.4353,0.4330,0.4304,0.4280,0.4276,0.4275,0.4264,0.4259,0.4259,0.4258,0.4257,0.4257,0.4235,0.4234,0.4234,0.4234,0.4234,0.4228,0.4202,0.4202,0.4202,0.4160,0.4160,0.4160,0.4160,0.4137,0.4137,0.4137,0.4137,0.4114,0.4114,0.4071,0.4071,0.4071,0.4071,0.4070,0.4070,0.4070,0.4062,0.4062,0.4062,0.4061,0.4061,0.4054,0.4054,0.4054,0.4052,0.4052,0.4052,0.4040,0.4040,0.4040,0.4040,0.4032,0.4032,0.4032,0.4032,0.4032,0.4032,0.4032,0.4032,0.4032,0.4032,0.4032,0.4032,0.4032,0.4032,0.3994,0.3990,0.3990,0.3990,0.3990,0.3990,0.3990,0.3990,0.3990,0.3990,0.3990,0.3990,0.3990,0.3990,0.3990,0.3990,0.3990,0.3990,0.3990,0.3990,0.3958,0.3957,0.3957,0.3957,0.3957,0.3957,0.3957,0.3957,0.3957,0.3957,0.3957,0.3957,0.3957,0.3957,0.3957,0.3957,0.3957,0.3957,0.3953,0.3953,0.3953,0.3953,0.3953,0.3953,0.3953,0.3953,0.3953,0.3953,0.3953,0.3953,0.3953,0.3953,0.3953,0.3953,0.3953,0.3953,0.3953,0.3953,0.3953,0.3953,0.3953,0.3953,0.3953,0.3953,0.3953,0.3953,0.3953,0.3953,0.3953,0.3953,0.3953,0.3953,0.3953,0.3953,0.3953,0.3953,0.3953,0.3953,0.3953,0.3953,0.3953,0.3951,0.3951,0.3951,0.3951,0.3951,0.3951,0.3951,0.3951,0.3951,0.3951,0.3951,0.3951,0.3951,0.3951,0.3951,0.3951,0.3951,0.3951,0.3951,0.3951,0.3951,0.3951,0.3951,0.3951], label: 'High'}
  ];

  public lineChartLabels: Label[] = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119].map((r)=>r+'');

  public lineChartOptions: (ChartOptions) = {
    responsive: false,
    scales: {
      xAxes: [{id: 'x-axis-0', position: 'bottom', scaleLabel: {display: true, labelString: 'Time (months)', fontStyle: 'bold'}, ticks: {suggestedMin: 0, suggestedMax: 120, maxTicksLimit: 24, stepSize: 5}}],
      yAxes: [{id: 'y-axis-0', position: 'left', scaleLabel: {display: true, labelString: 'Survival probability', fontStyle: 'bold'}, ticks: {suggestedMin: 0, suggestedMax: 1.0, stepSize: 0.1}}]
    }
  };

  public lineChartColors: Color[] = [
    {// test
      backgroundColor: 'rgba(0,0,0,0)',
      borderColor: 'rgba(0,0,0,1)',
      pointBackgroundColor: 'rgba(0,0,0,0)',
      pointBorderColor: 'rgba(0,0,0,0)',
      pointHoverBackgroundColor: 'rgba(0,0,0,0.5)',
      pointHoverBorderColor: 'rgba(0,0,0,0.8)'
    },
    {// low
      backgroundColor: 'rgba(0,0,0,0)',
      borderColor: 'rgba(109,200,163,1)',
      pointBackgroundColor: 'rgba(109,200,163,0)',
      pointBorderColor: 'rgba(109,200,163,0)',
      pointHoverBackgroundColor: 'rgba(109,200,163,0.5)',
      pointHoverBorderColor: 'rgba(109,200,163,0.8)'
    },
    {//medium
      backgroundColor: 'rgba(0,0,0,0)',
      borderColor: 'rgba(145,143,202,1)',
      pointBackgroundColor: 'rgba(145,143,202,0)',
      pointBorderColor: 'rgba(145,143,202,0)',
      pointHoverBackgroundColor: 'rgba(145,143,202,0.5)',
      pointHoverBorderColor: 'rgba(145,143,202,0.8)'
    },
    {//high
      backgroundColor: 'rgba(0,0,0,0)',
      borderColor: 'rgba(242,99,99,1)',
      pointBackgroundColor: 'rgba(242,99,99,0)',
      pointBorderColor: 'rgba(242,99,99,0)',
      pointHoverBackgroundColor: 'rgba(242,99,99,0.5)',
      pointHoverBorderColor: 'rgba(242,99,99,0.8)'
    }
  ];

  public lineChartLegend = true;
  public lineChartType = 'line';

  patientPhototypes = {
    [PatientPhototype.I]:'I',
    [PatientPhototype.II]:'II',
    [PatientPhototype.III]:'III',
    [PatientPhototype.IV]:'IV'
  };

  testId: string;
  test:Test;

  @ViewChild(BaseChartDirective, { static: true }) chart: BaseChartDirective;

  subscription1: Subscription;

  constructor(
    public afAuth: AngularFireAuth,
    private afs: AngularFirestore,
    private route: ActivatedRoute,
    private http: HttpClient,
    private router: Router
    ) { 
    this.route.paramMap.subscribe((params)=> {
      this.testId = params.get('testId');
      console.log(this.testId);
      if(!this.testId) this.router.navigate(['/']);
      this.subscription1 = this.afs.doc<TestJson>('tests/'+this.testId)
      .valueChanges().subscribe(res => {
        this.test = Test.fromJson(res);
        this.processing = !this.test.isProcessed;
        if(!this.processing){
          this.lineChartData[0]['data'] = this.test.predictedCurvePoints;
          this.lineChartData[0]['label'] = 'Test';
          this.lineChartData[0]['data'] = this.lineChartData[0]['data'].slice(0, 121);
          this.lineChartData[0]['data'] = this.lineChartData[0]['data'].map((r)=>Math.min(r,1.0))
          this.lineChartLabels = Array.from(Array(this.test.predictedCurvePoints.length).keys()).map((r)=>(r)+'')
          this.lineChartLabels = this.lineChartLabels.slice(0, 121);
        };
      });
    });
  }

  ngOnInit() {
    setTimeout(()=>{
      if(!this.test.isProcessed)
      this.http.get("https://skin-cancer.nicoforteza.com/test/"+this.test.id).subscribe((data) => {console.log('done', data);});
    }, 1000);

  }

  formatDate(date: Date): string {
    let month = '' + (date.getMonth() + 1);
    let day = '' + date.getDate();
    const year = date.getFullYear();

    if (month.length < 2) 
        month = '0' + month;
    if (day.length < 2) 
        day = '0' + day;

    return [year, month, day].join('-');
  }

  ngOnDestroy() {
    if (this.subscription1) {
      this.subscription1.unsubscribe();
    }
  }

  clamp (a, min, max) {
  return Math.min(Math.max(a, min), max);
};

}
